type Author {
  authorId: ID!
  authorName: String!
 }
 
type Order{
  orderId: ID!
  amount:Int
  quantity:Int
  orderProceed : String!
  user:User
  book:Book
}

type User {
  userId: ID!
  userName: String!
  email: String!
  password: String!
  role:String!
}
type Book{
	bookId:ID!
	bookName:String!
	price:Int
	author:Author
	

}

schema {
  query: Query
  mutation: Mutation
}

 type Query {
  allOrders: [Order]
  allAuthors: [Author]
  allBooks:[Book]
  allUsers: [User]
  getAuthor(authorId: ID!): Author
  getOrder(orderId:ID!):Order
  getBook(bookId:ID!):Book
  getUser(userId:ID!):User
  loginUser(userName:String!):User
}

type Mutation {
  
  orderProceed(id: ID!,orderProceed : String!): Order
  addAuthor(authorName: String!) : Author
  addOrder(quantity: String!,amount:Int!,book:ID!,user:ID!): Order
  addUser(userName: String!,email: String!,password: String!,role:String!): User
  addBook(bookName:String!,price:Int!,author:ID!):Book
 
  #updateAuthor(id: ID!,authorName: String!,price: String!): Author
  deleteAuthor(authorId: ID!): Boolean
  deleteUser(userId:ID!):Boolean
  deleteBook(bookId:ID!):Boolean
  deleteOrder(orderId:ID!):Boolean
 
}